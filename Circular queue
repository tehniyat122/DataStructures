
#include <stdio.h>
#include <stdlib.h>
#define MAXSIZE 5
    struct node
    {
        int data;
        struct node* next;
        
    };
    int queue[MAXSIZE];
    int front=-1;
    int rear=-1;

void Insert()
{
    struct node* ptr=(struct node*)malloc(sizeof(struct node*));
   if(ptr == NULL)
    {
     printf("Memory Overflow\n");    
    }
    int item;
    printf("Enter the item to insert");
    scanf("%d",&item);
    
   if( ((rear+1)%MAXSIZE)== front )
   {
       printf("Reached MAximum Size \n");
       return;
   }
   else if(front == -1 && rear == -1)
   {
      front=0;
      rear=0;
   }
   else if(front != 0 && rear == MAXSIZE)
   {
       rear=0;
   }
   else
   {
       rear=(rear+1)%MAXSIZE;
   }
   queue[rear]=item;
}

void Delete()
{
    if(front == -1)
    {
        printf("Nothing to delete\n");
    }
    else if(front == rear)
    {
        front=rear=-1;
    }
    else if(front == MAXSIZE-1)
    {
        front=0;
    }
    else
    {
        
        front=front+1;
    }
    
}

void Display()
{
    
    if(front == -1)
    {
        printf("Nothing to display");
        
    }
    else
    {
        int i=front;
        if(front <= rear)
        {
            for( i=front;i<=rear;i++)
            {
            printf("%d->",queue[i]);
            }
        }
        else
        {
            for( i=front;i<MAXSIZE;i++)
            {
            printf("%d->",queue[i]);
            }
            for( i=0;i<=rear;i++)
            {
            printf("%d->",queue[i]);
            }
            
        }
    }
    
}
int main()
{
    int choices;
    while(choices != 4)
    {
        printf("Enter the choices \n 1.Insert \n 2. Delete \n 3. Display \n ");
        scanf("%d",&choices);
        switch(choices)
        {
            case 1:
                Insert();
                break;
            
            case 2:
                Delete();
                break;
            
            case 3:
                Display();
                break;
                
            case 4:
                exit(0);
        }
    }

    return 0;
}
